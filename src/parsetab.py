
# parsetab.py
# This file is automatically generated. Do not edit.
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'DTYPE EQUALS LPAREN RPAREN LCPAREN RCPAREN RETTYPE FUNCNAME SEMICOL COMMA AMP WORD REF NUMBERexpression : RETTYPE FUNCNAME LPAREN RPAREN LCPAREN BODY RCPAREN\n\tBODY : DECL SEMICOL BODY \n\t\t\t| ASSIGN SEMICOL BODY\n\t\t\t| \n\t\n\tDECL : DTYPE DECLIST\n\t\n\tDECLIST : ID COMMA DECLIST \n\t\t\t| ID\n\t\n\tID : WORD\n\t   | REF ID\n\t\n\tLHS : WORD\n\t\t| AMP LHS\n\t\t| AMP LHS_POINT\n\t\t| LPAREN LHS RPAREN\n\t\n\tLHS_POINT : REF LHS\n\t\t| REF LHS_POINT\n\t\t| LPAREN LHS_POINT RPAREN\n\t\n\tASSIGN : PRIM COMMA ASSIGN \n\t\t   | PRIM\n\t\n\tPRIM : LHS EQUALS LHS\n\t\t| LHS EQUALS LHS_POINT\n\t\t| LHS_POINT EQUALS LHS\n\t\t| LHS_POINT EQUALS LHS_POINT\n\t\t| LHS_POINT EQUALS NUMBER\n\t'
    
_lr_action_items = {'FUNCNAME':([1,],[3,]),'RPAREN':([4,14,21,22,28,29,30,31,40,41,],[5,-10,-11,-12,40,41,-14,-15,-13,-16,]),'SEMICOL':([8,12,14,16,21,22,23,25,26,30,31,34,35,37,40,41,42,43,44,45,46,],[19,27,-10,-18,-11,-12,-8,-5,-7,-14,-15,-19,-20,-9,-13,-16,-17,-21,-23,-22,-6,]),'RETTYPE':([0,],[1,]),'RCPAREN':([6,9,19,27,36,39,],[-4,20,-4,-4,-3,-2,]),'EQUALS':([7,14,17,21,22,30,31,40,41,],[18,-10,33,-11,-12,-14,-15,-13,-16,]),'AMP':([6,10,13,15,18,19,27,32,33,],[10,10,10,10,10,10,10,10,10,]),'DTYPE':([6,19,27,],[11,11,11,]),'LPAREN':([3,6,10,13,15,18,19,27,32,33,],[4,13,13,13,13,13,13,13,13,13,]),'WORD':([6,10,11,13,15,18,19,24,27,32,33,38,],[14,14,23,14,14,14,14,23,14,14,14,23,]),'REF':([6,10,11,13,15,18,19,24,27,32,33,38,],[15,15,24,15,15,15,15,24,15,15,15,24,]),'$end':([2,20,],[0,-1,]),'NUMBER':([33,],[44,]),'COMMA':([14,16,21,22,23,26,30,31,34,35,37,40,41,43,44,45,],[-10,32,-11,-12,-8,38,-14,-15,-19,-20,-9,-13,-16,-21,-23,-22,]),'LCPAREN':([5,],[6,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'BODY':([6,19,27,],[9,36,39,]),'LHS':([6,10,13,15,18,19,27,32,33,],[7,21,28,30,34,7,7,7,43,]),'DECL':([6,19,27,],[12,12,12,]),'PRIM':([6,19,27,32,],[16,16,16,16,]),'ASSIGN':([6,19,27,32,],[8,8,8,42,]),'expression':([0,],[2,]),'DECLIST':([11,38,],[25,46,]),'LHS_POINT':([6,10,13,15,18,19,27,32,33,],[17,22,29,31,35,17,17,17,45,]),'ID':([11,24,38,],[26,37,26,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> expression","S'",1,None,None,None),
  ('expression -> RETTYPE FUNCNAME LPAREN RPAREN LCPAREN BODY RCPAREN','expression',7,'p_expression_prog','parser.py',75),
  ('BODY -> DECL SEMICOL BODY','BODY',3,'p_expression_body','parser.py',78),
  ('BODY -> ASSIGN SEMICOL BODY','BODY',3,'p_expression_body','parser.py',79),
  ('BODY -> <empty>','BODY',0,'p_expression_body','parser.py',80),
  ('DECL -> DTYPE DECLIST','DECL',2,'p_expression_decl','parser.py',84),
  ('DECLIST -> ID COMMA DECLIST','DECLIST',3,'p_expression_declist','parser.py',97),
  ('DECLIST -> ID','DECLIST',1,'p_expression_declist','parser.py',98),
  ('ID -> WORD','ID',1,'p_expression_id','parser.py',104),
  ('ID -> REF ID','ID',2,'p_expression_id','parser.py',105),
  ('LHS -> WORD','LHS',1,'p_expression_lhs','parser.py',111),
  ('LHS -> AMP LHS','LHS',2,'p_expression_lhs','parser.py',112),
  ('LHS -> AMP LHS_POINT','LHS',2,'p_expression_lhs','parser.py',113),
  ('LHS -> LPAREN LHS RPAREN','LHS',3,'p_expression_lhs','parser.py',114),
  ('LHS_POINT -> REF LHS','LHS_POINT',2,'p_expression_lhspointer','parser.py',118),
  ('LHS_POINT -> REF LHS_POINT','LHS_POINT',2,'p_expression_lhspointer','parser.py',119),
  ('LHS_POINT -> LPAREN LHS_POINT RPAREN','LHS_POINT',3,'p_expression_lhspointer','parser.py',120),
  ('ASSIGN -> PRIM COMMA ASSIGN','ASSIGN',3,'p_expression_assign','parser.py',124),
  ('ASSIGN -> PRIM','ASSIGN',1,'p_expression_assign','parser.py',125),
  ('PRIM -> LHS EQUALS LHS','PRIM',3,'p_prim','parser.py',129),
  ('PRIM -> LHS EQUALS LHS_POINT','PRIM',3,'p_prim','parser.py',130),
  ('PRIM -> LHS_POINT EQUALS LHS','PRIM',3,'p_prim','parser.py',131),
  ('PRIM -> LHS_POINT EQUALS LHS_POINT','PRIM',3,'p_prim','parser.py',132),
  ('PRIM -> LHS_POINT EQUALS NUMBER','PRIM',3,'p_prim','parser.py',133),
]
